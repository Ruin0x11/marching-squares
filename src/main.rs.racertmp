#![feature(core)]
extern crate rand;
extern crate noise;
extern crate rustbox;

use noise::{perlin2, Seed};

mod noisefield;
use noisefield::NoiseField;

type Cell = &'static str;

const CASES: [Cell; 16] = [
    "   ",
    "  _",
    "_  ",
    "___",
    " \\_",
    " | ",
    "/ _",
    "_/ ",
    "_/ ",
    "_ \\",
    " | ",
    "  \\",
    "___",
    "_  ",
    "  _",
    "   ",
];

fn corners(x: f32, y: f32, width: f32) -> [[f32; 2]; 4] {
    let w = width / 2.0;
    [[x - w, y - w], [x + w, y - w],
     [x - w, y + w], [x + w, y + w]]
}

fn march(samples: &[f32; 4]) -> Cell {
    let bits: Vec<usize> = samples.iter().map(|&s| if s > 0.25 { 1 } else { 0 }).collect();
    let case = bits[0] << 3 | bits[1] << 2 | bits[2] << 1 | bits[3];
    CASES[case]
}

fn print_cell_line(cells: &[Cell]) {
    for c in cells.iter() {
        print!("{}",c);
    }
}

fn main() {
    let mut running = true;


    let rb = match RustBox::init(InitOptions{
        buffer_stderr: stdio::stderr_raw().isatty(),
        input_mode: InputMode::Esc,
    }) {
        Result::Ok(v) => v,
        Result::Err(e) => panic!("{}", e),
    };

    
    while running {
]


    const ROWS: usize = 25;
    const COLS: usize = 25;
    
    let mut output = [[CASES[0]; COLS]; ROWS];
    let field: NoiseField<f32> = NoiseField::new(Seed::new(0), Box::new(perlin2));
    
    let stepx = 0.3f32;
    let stepy = 0.3f32;

    let mut startx = 0.0f32;
    let mut starty = 0.0f32;

    let mut x = startx;
    let mut y = starty;

    for oy in 0..ROWS {
        for ox in 0..COLS {
            let points = corners(x, y, stepx);
            let samples = [field.sample(&points[0]),
                           field.sample(&points[1]),
                           field.sample(&points[2]),
                           field.sample(&points[3])];

            output[oy][ox] = march(&samples);
            x += stepx;
        }
        y += stepy;
        x = startx;
    }

    for line in output.iter() {
        print_cell_line(line);
        println!("");
    }
}
